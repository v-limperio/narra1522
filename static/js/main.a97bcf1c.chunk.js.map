{"version":3,"sources":["UI_components/main_navbar.js","graphs/chiamate1522.js","App.js","reportWebVitals.js","index.js"],"names":["MainNavbar","Navbar","bg","Brand","React","Component","Chiamate1522","ref","useRef","margin","width","height","github_gists","useEffect","Promise","all","d3","d2018","chiamate_utenti","chiamata_telefonica","chat","d2019","d2020","then","allData","data2018","data2020","colors","range","keys","columns","slice","groupkey","svg","current","classed","attr","append","style","text","x","domain","map","d","padding","call","tickSizeOuter","selectAll","each","word","this","words","split","reverse","line","lineNumber","y","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength","bandwidth","x1","rangeRound","g","select","remove","data","key","value","App","Container","fluid","Row","className","Col","md","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a97bcf1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nclass MainNavbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\">\r\n                <Navbar.Brand>Narra1522</Navbar.Brand>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainNavbar;","import React, { useRef } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nconst Chiamate1522 = () => {\r\n    const ref = useRef();\r\n    var margin = { top: 50, right: 150, bottom: 80, left: 90 },\r\n        width = 1460 - margin.left - margin.right,\r\n        height = 650 - margin.top - margin.bottom\r\n\r\n\r\n    const github_gists = [\r\n        \"https://raw.githubusercontent.com/v-limperio/CAV_1522/main/24_Giugno/Tavola-2/Tavola-2-2018.csv\",\r\n        \"https://raw.githubusercontent.com/v-limperio/CAV_1522/main/24_Giugno/Tavola-2/Tavola-2-2019.csv\",\r\n        \"https://raw.githubusercontent.com/v-limperio/CAV_1522/main/24_Giugno/Tavola-2/Tavola-2-2020.csv\"\r\n    ];\r\n\r\n    React.useEffect(() => {\r\n        Promise.all([\r\n            d3.csv(github_gists[0], function (d2018) {\r\n                return {\r\n                    chiamate_utenti: d2018.chiamate_utenti,\r\n                    chiamata_telefonica: +d2018.chiamata_telefonica,\r\n                    chat: +d2018.chat\r\n                }\r\n            }),\r\n            d3.csv(github_gists[1], function (d2019) {\r\n                return {\r\n                    chiamate_utenti: d2019.chiamate_utenti,\r\n                    chiamata_telefonica: +d2019.chiamata_telefonica,\r\n                    chat: +d2019.chat\r\n                }\r\n            }),\r\n            d3.csv(github_gists[2], function (d2020) {\r\n                return {\r\n                    chiamate_utenti: d2020.chiamate_utenti,\r\n                    chiamata_telefonica: +d2020.chiamata_telefonica,\r\n                    chat: +d2020.chat\r\n                }\r\n            })\r\n        ])\r\n            .then(\r\n                function (allData) {\r\n                    const data2018 = allData[0],\r\n                        data2019 = allData[1],\r\n                        data2020 = allData[2],\r\n                        colors = d3\r\n                            .scaleOrdinal()\r\n                            .range([\"#98abc5\", \"#d0743c\"]),\r\n                        keys = data2018.columns.slice(1),\r\n                        groupkey = data2018.columns[0];\r\n\r\n                    //Genero l'svg\r\n                    const svg = d3\r\n                        .select(ref.current)\r\n                        .classed(\"svg-container\", true)\r\n                        .attr(\"class\", \"svg-content-responsive\")\r\n                        .attr(\"width\", \"100%\")\r\n                        .attr(\"height\", \"100%\")\r\n                        .attr(\"viewBox\", \"0 0 1360 650\")\r\n                        .append(\"g\")\r\n                        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n                    //Legenda\r\n                    svg.append(\"circle\").attr(\"cx\",370).attr(\"cy\",15).attr(\"r\", 6).style(\"fill\", \"#98abc5\")\r\n                    svg.append(\"text\").attr(\"x\", 390).attr(\"y\", 15).text(\"Chiamata telefonica\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n                    svg.append(\"circle\").attr(\"cx\",640).attr(\"cy\",15).attr(\"r\", 6).style(\"fill\", \"#d0743c\")\r\n                    svg.append(\"text\").attr(\"x\", 660).attr(\"y\", 15).text(\"Chat\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n\r\n                    //TITOLO\r\n                    svg.append(\"text\")\r\n                        .attr(\"class\", \"title\")\r\n                        .attr(\"x\", (width / 2))\r\n                        .attr(\"y\", 0 - (margin.top / 2))\r\n                        .attr(\"text-anchor\", \"middle\")\r\n                        .style(\"font-size\", \"16px\")\r\n                        .style(\"text-decoration\", \"underline\")\r\n                        .text(\"Motivi delle chiamate valide per tipologia di canale (telefono, chat). Anno 2020\");\r\n\r\n                    //Scala per l'asse x\r\n                    var x = d3\r\n                        .scaleBand()\r\n                        .domain(data2018.map(function (d) { return d.chiamate_utenti })) // ritorna la lista di tipologie di chiamate\r\n                        .range([margin.left, width - margin.right])\r\n                        .padding(0.1);\r\n                    //Asse x\r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"xAxis\")\r\n                        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n                        .call(d3.axisBottom(x).tickSizeOuter(0))\r\n                        .selectAll(\".tick text\")\r\n                        .call(wrap, x.bandwidth());\r\n                    \r\n                    //Prelevo Chiamate telefoniche e chat\r\n                    var x1 = d3\r\n                        .scaleBand()\r\n                        .domain(keys)\r\n                        .rangeRound([0,x.bandwidth()])\r\n                        .padding(0.1);\r\n\r\n                    //Scala per l'asse y\r\n                    var y = d3\r\n                        .scaleLinear()\r\n                        .domain([0, 20000])\r\n                        .range([height - margin.bottom, margin.top]);\r\n                    //Asse y\r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"yAxis\")\r\n                        .attr(\"transform\", `translate(${margin.left},0)`)\r\n                        .call(d3.axisLeft(y))\r\n                        .call(g => g.select(\".domain\").remove());\r\n\r\n                    //BARCHART\r\n                    svg.append(\"g\")\r\n                        .selectAll(\"g\")\r\n                        .data(data2020)\r\n                        .join(\"g\")\r\n                            .attr(\"transform\", d => `translate(${x(d[groupkey])},0)`)\r\n                        .selectAll(\"rect\")\r\n                        .data(d => keys.map(key => ({key, value: d[key]})))\r\n                        .join(\"rect\")\r\n                            .attr(\"x\", (d) => x1(d.key))\r\n                            .attr(\"y\", d => y(d.value))\r\n                            .attr(\"height\", d => y(0) - y(d.value))\r\n                            .attr(\"width\", x1.bandwidth())\r\n                            .attr(\"fill\", d => colors(d.key));\r\n\r\n                    //Funzione di Wrap per le etichette troppo lunghe \r\n                    function wrap(text, width) {\r\n                        text.each(function () {\r\n                            var text = d3.select(this),\r\n                                words = text.text().split(/\\s+/).reverse(),\r\n                                word,\r\n                                line = [],\r\n                                lineNumber = 0,\r\n                                lineHeight = 1, // ems\r\n                                y = text.attr(\"y\"),\r\n                                dy = parseFloat(text.attr(\"dy\")),\r\n                                tspan = text.text(null)\r\n                                    .append(\"tspan\")\r\n                                    .attr(\"x\", 0)\r\n                                    .attr(\"y\", y)\r\n                                    .attr(\"dy\", dy + \"em\");\r\n                            while (!!(word = words.pop())) {\r\n                                line.push(word);\r\n                                tspan.text(line.join(\" \"));\r\n                                if (tspan.node().getComputedTextLength() > width) {\r\n                                    line.pop();\r\n                                    tspan.text(line.join(\" \"));\r\n                                    line = [word];\r\n                                    tspan = text.append(\"tspan\")\r\n                                        .attr(\"x\", 0)\r\n                                        .attr(\"y\", y)\r\n                                        .attr(\"dy\", `${++lineNumber * lineHeight + dy}em`)\r\n                                        .text(word);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                },\r\n            );\r\n    });\r\n\r\n\r\n    return (\r\n        <svg ref={ref} />\r\n    );\r\n}\r\nexport default Chiamate1522;","import './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport React from 'react';\nimport MainNavbar from './UI_components/main_navbar';\nimport Chiamate1522 from './graphs/chiamate1522';\n\nconst App = () => {\n  return (\n    <Container fluid>\n      <MainNavbar />\n      <Row className=\"hr-graphbox\">\n        <Col md className=\"hc-graphbox\">\n          <Chiamate1522 />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}