{"version":3,"sources":["UI_components/main_navbar.js","graphs/24 Giugno/tavola2.js","graphs/24 Giugno/tavola7.js","App.js","reportWebVitals.js","index.js"],"names":["MainNavbar","Navbar","bg","Brand","React","Component","Tavola2","ref","useRef","margin","width","height","github_gists","useEffect","Promise","all","d3","d2018","chiamate_utenti","chiamata_telefonica","chat","d2019","d2020","then","allData","data2018","data2020","colors","range","keys","columns","slice","groupkey","svg","current","classed","attr","append","style","text","x","domain","map","d","padding","call","tickSizeOuter","selectAll","each","word","this","words","split","reverse","line","lineNumber","y","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength","bandwidth","x1","rangeRound","g","select","remove","data","key","value","Tavola7","Date","chiamate_2013","chiamate_2014","chiamate_2015","chiamate_2016","chiamate_2017","chiamate_2018","chiamate_2019","chiamate_2020","chiamate","console","log","datum","App","Container","fluid","Row","className","Col","md","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eef8bd59.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nclass MainNavbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\">\r\n                <Navbar.Brand>Narra1522</Navbar.Brand>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainNavbar;","import React, { useRef } from 'react';\r\nimport * as d3 from \"d3\";\r\nimport { fcumsum } from 'd3';\r\n\r\nconst Tavola2 = () => {\r\n    const ref = useRef();\r\n    var margin = { top: 50, right: 150, bottom: 80, left: 90 },\r\n        width = 1460 - margin.left - margin.right,\r\n        height = 650 - margin.top - margin.bottom\r\n\r\n    const github_gists = [\r\n        \"https://raw.githubusercontent.com/v-limperio/CAV_1522/main/24_Giugno/Tavola-2/Tavola-2-2018.csv\",\r\n        \"https://raw.githubusercontent.com/v-limperio/CAV_1522/main/24_Giugno/Tavola-2/Tavola-2-2019.csv\",\r\n        \"https://raw.githubusercontent.com/v-limperio/CAV_1522/main/24_Giugno/Tavola-2/Tavola-2-2020.csv\"\r\n    ];\r\n\r\n    React.useEffect(() => {\r\n        Promise.all([\r\n            d3.csv(github_gists[0], function (d2018) {\r\n                return {\r\n                    chiamate_utenti: d2018.chiamate_utenti,\r\n                    chiamata_telefonica: +d2018.chiamata_telefonica,\r\n                    chat: +d2018.chat\r\n                }\r\n            }),\r\n            d3.csv(github_gists[1], function (d2019) {\r\n                return {\r\n                    chiamate_utenti: d2019.chiamate_utenti,\r\n                    chiamata_telefonica: +d2019.chiamata_telefonica,\r\n                    chat: +d2019.chat\r\n                }\r\n            }),\r\n            d3.csv(github_gists[2], function (d2020) {\r\n                return {\r\n                    chiamate_utenti: d2020.chiamate_utenti,\r\n                    chiamata_telefonica: +d2020.chiamata_telefonica,\r\n                    chat: +d2020.chat\r\n                }\r\n            })\r\n        ])\r\n            .then(\r\n                function (allData) {\r\n                    const data2018 = allData[0],\r\n                        data2019 = allData[1],\r\n                        data2020 = allData[2],\r\n                        colors = d3\r\n                            .scaleOrdinal()\r\n                            .range([\"#98abc5\", \"#d0743c\"]),\r\n                        keys = data2018.columns.slice(1),\r\n                        groupkey = data2018.columns[0];\r\n\r\n                    //Genero l'svg\r\n                    const svg = d3\r\n                        .select(ref.current)\r\n                        .classed(\"svg-container\", true)\r\n                        .attr(\"class\", \"svg-content-responsive\")\r\n                        .attr(\"width\", \"100%\")\r\n                        .attr(\"height\", \"100%\")\r\n                        .attr(\"viewBox\", \"0 0 1360 650\")\r\n                        .append(\"g\")\r\n                        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n                    //Legenda\r\n                    svg.append(\"circle\").attr(\"cx\",370).attr(\"cy\",15).attr(\"r\", 6).style(\"fill\", \"#98abc5\")\r\n                    svg.append(\"text\").attr(\"x\", 390).attr(\"y\", 15).text(\"Chiamata telefonica\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n                    svg.append(\"circle\").attr(\"cx\",640).attr(\"cy\",15).attr(\"r\", 6).style(\"fill\", \"#d0743c\")\r\n                    svg.append(\"text\").attr(\"x\", 660).attr(\"y\", 15).text(\"Chat\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n\r\n                    //TITOLO\r\n                    svg.append(\"text\")\r\n                        .attr(\"class\", \"title\")\r\n                        .attr(\"x\", (width / 2))\r\n                        .attr(\"y\", 0 - (margin.top / 2))\r\n                        .attr(\"text-anchor\", \"middle\")\r\n                        .style(\"font-size\", \"16px\")\r\n                        .style(\"text-decoration\", \"underline\")\r\n                        .text(\"Motivi delle chiamate valide per tipologia di canale (telefono, chat). Anno 2020\");\r\n\r\n                    //Scala per l'asse x\r\n                    var x = d3\r\n                        .scaleBand()\r\n                        .domain(data2018.map(function (d) { return d.chiamate_utenti })) // ritorna la lista di tipologie di chiamate\r\n                        .range([margin.left, width - margin.right])\r\n                        .padding(0.1);\r\n                    //Asse x\r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"xAxis\")\r\n                        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n                        .call(d3.axisBottom(x).tickSizeOuter(0))\r\n                        .selectAll(\".tick text\")\r\n                        .call(wrap, x.bandwidth());\r\n                    \r\n                    //Prelevo Chiamate telefoniche e chat\r\n                    var x1 = d3\r\n                        .scaleBand()\r\n                        .domain(keys)\r\n                        .rangeRound([0,x.bandwidth()])\r\n                        .padding(0.1);\r\n\r\n                    //Scala per l'asse y\r\n                    var y = d3\r\n                        .scaleLinear()\r\n                        .domain([0, 20000])\r\n                        .range([height - margin.bottom, margin.top]);\r\n                    //Asse y\r\n                    svg.append(\"g\")\r\n                        .attr(\"class\", \"yAxis\")\r\n                        .attr(\"transform\", `translate(${margin.left},0)`)\r\n                        .call(d3.axisLeft(y))\r\n                        .call(g => g.select(\".domain\").remove());\r\n\r\n                    //BARCHART\r\n                    svg.append(\"g\")\r\n                        .selectAll(\"g\")\r\n                        .data(data2020)\r\n                        .join(\"g\")\r\n                            .attr(\"transform\", d => `translate(${x(d[groupkey])},0)`)\r\n                        .selectAll(\"rect\")\r\n                        .data(d => keys.map(key => ({key, value: d[key]})))\r\n                        .join(\"rect\")\r\n                            .attr(\"x\", (d) => x1(d.key))\r\n                            .attr(\"y\", d => y(d.value))\r\n                            .attr(\"height\", d => y(0) - y(d.value))\r\n                            .attr(\"width\", x1.bandwidth())\r\n                            .attr(\"fill\", d => colors(d.key));\r\n\r\n                    //Funzione di Wrap per le etichette troppo lunghe \r\n                    function wrap(text, width) {\r\n                        text.each(function () {\r\n                            var text = d3.select(this),\r\n                                words = text.text().split(/\\s+/).reverse(),\r\n                                word,\r\n                                line = [],\r\n                                lineNumber = 0,\r\n                                lineHeight = 1, // ems\r\n                                y = text.attr(\"y\"),\r\n                                dy = parseFloat(text.attr(\"dy\")),\r\n                                tspan = text.text(null)\r\n                                    .append(\"tspan\")\r\n                                    .attr(\"x\", 0)\r\n                                    .attr(\"y\", y)\r\n                                    .attr(\"dy\", dy + \"em\");\r\n                            while (!!(word = words.pop())) {\r\n                                line.push(word);\r\n                                tspan.text(line.join(\" \"));\r\n                                if (tspan.node().getComputedTextLength() > width) {\r\n                                    line.pop();\r\n                                    tspan.text(line.join(\" \"));\r\n                                    line = [word];\r\n                                    tspan = text.append(\"tspan\")\r\n                                        .attr(\"x\", 0)\r\n                                        .attr(\"y\", y)\r\n                                        .attr(\"dy\", `${++lineNumber * lineHeight + dy}em`)\r\n                                        .text(word);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                },\r\n            );\r\n    });\r\n\r\n\r\n    return (\r\n        <svg ref={ref} />\r\n    );\r\n}\r\nexport default Tavola2;","import React, { useRef } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\n// Tavola 7 - Chiamate da utenti dal 1°marzo 2020 al 31 ottobre 2020. Anni 2013-2020. Valori assoluti\r\n\r\nconst Tavola7 = () => {\r\n    const ref = useRef(),\r\n        github_gist = \"https://raw.githubusercontent.com/v-limperio/CAV_1522/main/24_Giugno/Tavola-7.csv\";\r\n\r\n    var margin = { top: 50, right: 80, bottom: 80, left: 40 },\r\n        width = 900 - margin.left - margin.right,\r\n        height = 697 - margin.top - margin.bottom;\r\n\r\n    React.useEffect(() => {\r\n        d3.csv(github_gist, function (d) {\r\n            return {\r\n                data: new Date(d.data),\r\n                chiamate_2013: +d.chiamate_2013,\r\n                chiamate_2014: +d.chiamate_2014,\r\n                chiamate_2015: +d.chiamate_2015,\r\n                chiamate_2016: +d.chiamate_2016,\r\n                chiamate_2017: +d.chiamate_2017,\r\n                chiamate_2018: +d.chiamate_2018,\r\n                chiamate_2019: +d.chiamate_2019,\r\n                chiamate_2020: +d.chiamate_2020,\r\n            }\r\n        }).then(\r\n            function (allData) {\r\n                const chiamate = allData;\r\n                const format = d3.timeFormat(\"%Y-%m-%d\");\r\n                var keys = chiamate.columns.slice(1);\r\n\r\n                console.log(d3.extent(chiamate, d => d.data));\r\n\r\n                //SVG\r\n                const svg = d3\r\n                    .select(ref.current)\r\n                    .attr(\"class\", \"svg-content-responsive\")\r\n                    .attr(\"width\", \"100%\")\r\n                    .attr(\"height\", \"100%\")\r\n                    .attr(\"viewBox\", \"0 0 750 697\")\r\n                    .append(\"g\")\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");       \r\n\r\n                //TITOLO\r\n                svg.append(\"text\")\r\n                    .attr(\"class\", \"title\")\r\n                    .attr(\"x\", (width / 2) - margin.left)\r\n                    .attr(\"y\", 0 - (margin.top / 2))\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .style(\"font-size\", \"18\")\r\n                    .style(\"text-decoration\", \"underline\")\r\n                    .text(\"Chiamate da utenti dal 1°marzo al 31 ottobre. Dal 2013 al 2020.\");\r\n\r\n                //Scale per Asse x\r\n                var x = d3\r\n                    .scaleUtc()\r\n                    .domain(d3.extent(chiamate, d => d.data))\r\n                    .range([margin.left, width - margin.right]);\r\n                //Asse x\r\n                svg.append(\"g\")\r\n                    .attr(\"class\", \"xAxis\")\r\n                    .style(\"font-size\", 14)\r\n                    .attr(\"transform\", `translate(-20,${height - margin.bottom})`)\r\n                    .call(d3.axisBottom(x));\r\n\r\n                //Scale per Asse y\r\n                var y = d3\r\n                    .scaleLinear()\r\n                    .domain([0, 300])\r\n                    .range([height - margin.bottom, margin.top])\r\n                //Asse y\r\n                svg.append(\"g\")\r\n                    .attr(\"class\", \"yAxis\")\r\n                    .style(\"font-size\", 14)\r\n                    .attr(\"transform\", `translate(0,0)`)\r\n                    .call(d3.axisLeft(y))\r\n                    .call(g => g.select(\".domain\").remove());\r\n\r\n                //Linechart\r\n                svg.append(\"path\")\r\n                    .attr(\"class\", \"linechart-chiamate\")\r\n                    .datum(chiamate)\r\n                    .attr(\"fill\", \"none\")\r\n                    .attr(\"stroke\", \"steelblue\")\r\n                    .attr(\"stroke-width\", 2)\r\n                    .attr(\"d\", d3.line()\r\n                        .x(function(d) {return x(d.data)})\r\n                        .y(function(d) {return y(d.chiamate_2020)})\r\n                        );\r\n\r\n            }\r\n        )\r\n    });\r\n\r\n    return <svg ref={ref} />\r\n}\r\n\r\nexport default Tavola7","import './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport React from 'react';\nimport MainNavbar from './UI_components/main_navbar';\nimport Tavola2 from './graphs/24 Giugno/tavola2';\nimport Tavola7 from './graphs/24 Giugno/tavola7';\n\nconst App = () => {\n  return (\n    <Container fluid>\n      <MainNavbar />\n      <Row className=\"testata\">\n        <Col className=\"coltestata\">\n          <h1>Heading</h1>\n          <h3>Prova Grafico (Orizzontale)</h3>\n          <p>\n            Lorem ipsum dolor sit amet,\n            consectetur adipiscing elit,\n            sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n            Excepteur sint occaecat cupidatat non proident,\n            sunt in culpa qui officia deserunt mollit anim id est laborum\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \n            totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \n            sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \n            Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \n            sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.\n            Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, \n            nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \n            vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n          </p>\n        </Col>\n      </Row>\n      <Row className=\"hr-graphbox\">\n        <Col md className=\"hc-graphbox\">\n          <Tavola2 />\n        </Col>\n      </Row>\n      <Row className=\"testata\">\n        <Col className=\"coltestata\">\n        <h1>Heading</h1>\n          <h3>Prova Grafico (Verticale)</h3>\n          <p>\n            Lorem ipsum dolor sit amet,\n            consectetur adipiscing elit,\n            sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n            Excepteur sint occaecat cupidatat non proident,\n            sunt in culpa qui officia deserunt mollit anim id est laborum\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \n            totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \n            sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \n            Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \n            sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.\n            Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, \n            nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \n            vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n          </p>\n        </Col>\n        <Col md className=\"hc-graphbox\">\n          <Tavola7 />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}